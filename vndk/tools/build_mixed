#!/bin/bash -ex
echo "Read online docs"
}
exit_badparam () {
echo "ERROR: $1" >&2
usage
exit 1
}
cleanup_and_exit () {
readonly result="$?"
rm -rf "$TEMP_DIR"
exit "$result"
}
trap cleanup_and_exit EXIT
while getopts :v:m:p:b:t:sd opt; do
case "$opt" in
v)
readonly VENDOR_VERSION="$OPTARG"
;;
m)
readonly MODIFY_SYSTEM_SCRIPT="$OPTARG"
;;
p)
readonly OVERRIDE_VBMETA_IMAGE_PATH="$OPTARG"
;;
b)
readonly OVERRIDE_BOOT_IMAGE_PATH="$OPTARG"
;;
t)
readonly OTATOOLS_ZIP="$OPTARG"
;;
s)
readonly INCLUDE_PRODUCT=true
;;
d)
readonly SKIP_VBMETA_REPLACE=true
;;
\?)
exit_badparam "Invalid options: -"$OPTARG""
;;
:)
exit_badparam "Option -"$OPTARG" requires an argument."
;;
esac
done
if [[ -z "${VENDOR_VERSION+x}" && ! -z "${MODIFY_SYSTEM_SCRIPT+x}" ]] || \
[[ ! -z "${VENDOR_VERSION+x}" && -z "${MODIFY_SYSTEM_SCRIPT+x}" ]]; then
exit_badparam "Need -v + -m"
fi
shift "$((OPTIND-1))"
if [[ $# -lt 3 ]]; then
exit_badparam "Wrong # of arguments"
fi
readonly SYSTEM_DIR="$1"
readonly DEVICE_DIR="$2"
readonly DIST_DIR="$3"
readonly TEMP_DIR="$(mktemp -d /tmp/"$(basename $0)"_XXXXXXXX)"
readonly SYSTEM_TARGET_FILES_ARCHIVE="$(find "$SYSTEM_DIR" -name "*-target_files-*.zip" -print)"
if [[ ! -f "$SYSTEM_TARGET_FILES_ARCHIVE" ]]; then
exit_badparam "Can't find system target files archive"
fi
readonly DEVICE_ARCHIVE="$(find "$DEVICE_DIR" -name "*-img-*.zip" -print)"
if [[ ! -f "$DEVICE_ARCHIVE" ]]; then
exit_badparam "Could not find device img archive in $DEVICE_DIR."
fi
readonly DEVICE_TARGET_FILES_ARCHIVE="$(find "$DEVICE_DIR" -name "*-target_files-*.zip" -print)"
if [[ ! -f "$DEVICE_TARGET_FILES_ARCHIVE" ]]; then
exit_badparam "Couldn't find device target_files archive"
fi
if [[ ! -z "${MODIFY_SYSTEM_SCRIPT+x}" && ! -f "$MODIFY_SYSTEM_SCRIPT" ]]; then
exit_badparam "Script not found: "$MODIFY_SYSTEM_SCRIPT""
fi
if [[ ! -z "${OVERRIDE_VBMETA_IMAGE_PATH+x}" && ! -f "$OVERRIDE_VBMETA_IMAGE_PATH" ]]; then
exit_badparam "vbmeta.img not found"
fi
if [[ ! -z "${OVERRIDE_BOOT_IMAGE_PATH+x}" && ! -f "$OVERRIDE_BOOT_IMAGE_PATH" ]]; then
exit_badparam "boot image not found"
fi
readonly DEVICE_ARTIFACTS_DIR="$TEMP_DIR"/device_archive_artifacts
readonly DEVICE_IMAGES_DIR="$DEVICE_ARTIFACTS_DIR"/IMAGES
readonly SYSTEM_ARTIFACTS_DIR="$TEMP_DIR"/system_artifacts
readonly SYSTEM_IMAGES_DIR="$SYSTEM_ARTIFACTS_DIR"/IMAGES
readonly OTATOOLS_DIR="$TEMP_DIR"/otatools
readonly SPL_PROPERTY_NAME="ro.build.version.security_patch"
readonly SYSTEM_BUILD_PROP="SYSTEM/build.prop"
declare -a EXTRACT_SYSTEM_FILE_LIST
EXTRACT_SYSTEM_FILE_LIST=(
IMAGES/system.img \
IMAGES/vbmeta.img \
"$SYSTEM_BUILD_PROP" \
)
declare -a EXTRACT_VINTF_SYSTEM_FILE_LIST
EXTRACT_VINTF_SYSTEM_FILE_LIST=(
 "$SYSTEM_BUILD_PROP" \
)
declare -a EXTRACT_DEVICE_FILE_LIST
EXTRACT_DEVICE_FILE_LIST=(
*/build.prop \
META/* \
)
declare -A SYSTEM_SEARCH_PATH
SYSTEM_SEARCH_PATH=( \
[/system]="SYSTEM" \
[/product]="PRODUCT SYSTEM/product" \  [/system_ext]="SYSTEM_EXT SYSTEM/system_ext" \
)
declare -A DEVICE_SEARCH_PATH
DEVICE_SEARCH_PATH=( \
[/vendor]="VENDOR" \
[/odm]="ODM VENDOR/odm" \
)

if [[ ! -f "$OTATOOLS_ZIP" ]]; then
echo "otatools.zip is missing"
else
readonly OTATOOLS_AVAILABLE=true
mkdir -p "$OTATOOLS_DIR"
unzip "$OTATOOLS_ZIP" bin/* lib64/* -d "$OTATOOLS_DIR"
export PATH="$OTATOOLS_DIR"/bin:"$PATH"
export LD_LIBRARY_PATH="$OTATOOLS_DIR"/lib64:"$LD_LIBRARY_PATH"
declare -a VINTF_DUMP_FILE_LIST
VINTF_DUMP_FILE_LIST=( "$(checkvintf --dump-file-list)" )
for vintf_file_list in ${VINTF_DUMP_FILE_LIST[*]}; do
if [[ "$vintf_file_list" == */ ]]; then
vintf_file_list="$vintf_file_list"\*
for system_dir in "${!SYSTEM_SEARCH_PATH[@]}"; do
if [[ "$vintf_file_list" == "$system_dir"/* ]]; then
for search_dir in ${SYSTEM_SEARCH_PATH["$system_dir"]}; do
search_file=${vintf_file_list/$system_dir/$search_dir}
unzip -l "$SYSTEM_TARGET_FILES_ARCHIVE" "$search_file" > /dev/null && \
EXTRACT_VINTF_SYSTEM_FILE_LIST+=( "$search_file" )
done
break
fi
done
for device_dir in "${!DEVICE_SEARCH_PATH[@]}"; do
if [[ "$vintf_file_list" == "$device_dir"/* ]]; then
for search_dir in ${DEVICE_SEARCH_PATH["$device_dir"]}; do
search_file=${vintf_file_list/$device_dir/$search_dir}
unzip -l "$DEVICE_TARGET_FILES_ARCHIVE" "$search_file" > /dev/null && \
EXTRACT_DEVICE_FILE_LIST+=( "$search_file" )
done
break
fi
done
fi
done
fi
if [[ "$INCLUDE_PRODUCT" == true ]]; then
unzip -l "$SYSTEM_TARGET_FILES_ARCHIVE" | grep -q IMAGES/product.img &&
EXTRACT_SYSTEM_FILE_LIST+=(IMAGES/product.img)
fi
mkdir -p "$SYSTEM_ARTIFACTS_DIR"
unzip "$SYSTEM_TARGET_FILES_ARCHIVE" "${EXTRACT_SYSTEM_FILE_LIST[@]}" \
-d "$SYSTEM_ARTIFACTS_DIR"
mkdir -p "$DEVICE_IMAGES_DIR"
unzip "$DEVICE_ARCHIVE" -d "$DEVICE_IMAGES_DIR"
unzip "$DEVICE_TARGET_FILES_ARCHIVE" "${EXTRACT_DEVICE_FILE_LIST[@]}" \
-d "$DEVICE_ARTIFACTS_DIR"
if [[ ! -z "${VENDOR_VERSION+x}" ]]; then
cp "$SYSTEM_TARGET_FILES_ARCHIVE" "$TEMP_DIR"
readonly COPY_SYSTEM_TARGET_FILES_ARCHIVE="$TEMP_DIR"/"$(basename "$SYSTEM_TARGET_FILES_ARCHIVE")"
readonly SYSTEM_SPL=$(sed -n -r "s/^"$SPL_PROPERTY_NAME"=(.*)$/\1/p" "$SYSTEM_ARTIFACTS_DIR"/"$SYSTEM_BUILD_PROP")
readonly VENDOR_SPL=$(sed -n -r "s/^"$SPL_PROPERTY_NAME"=(.*)$/\1/p" "$DEVICE_ARTIFACTS_DIR"/"$SYSTEM_BUILD_PROP")
declare -a args
args=(-v "$VENDOR_VERSION" "$COPY_SYSTEM_TARGET_FILES_ARCHIVE")
if [[ "$SYSTEM_SPL" != "$VENDOR_SPL" ]]; then
echo "Security patch level mismatch detected..."
echo "  SPL of system: "$SYSTEM_SPL""
echo "  SPL of vendor: "$VENDOR_SPL""
args+=("$VENDOR_SPL")
fi
"$MODIFY_SYSTEM_SCRIPT" "${args[@]}"
unzip -o "$COPY_SYSTEM_TARGET_FILES_ARCHIVE" IMAGES/system.img -d "$SYSTEM_ARTIFACTS_DIR"
fi
if [[ "$OTATOOLS_AVAILABLE" == true ]]; then
unzip -o "$SYSTEM_TARGET_FILES_ARCHIVE" "${EXTRACT_VINTF_SYSTEM_FILE_LIST[@]}" \
-d "$DEVICE_ARTIFACTS_DIR"
check_target_files_vintf "$DEVICE_ARTIFACTS_DIR"
fi
cp "$SYSTEM_IMAGES_DIR"/system.img "$DEVICE_IMAGES_DIR"/
if [[ "$INCLUDE_PRODUCT" == true ]]; then
if [[ -f "$SYSTEM_IMAGES_DIR"/product.img ]]; then
cp "$SYSTEM_IMAGES_DIR"/product.img "$DEVICE_IMAGES_DIR"/
else
rm -f "$DEVICE_IMAGES_DIR"/product.img
sed -i "/partition-exists=product$/d" "$DEVICE_IMAGES_DIR"/android-info.txt
fi
fi
if [[ "$SKIP_VBMETA_REPLACE" == true ]]; then
echo "Skip vbmeta.img replacement."
else
if [[ -f "$DEVICE_IMAGES_DIR"/vbmeta.img ]]; then
readonly VBMETA_IMAGE_PATH="${OVERRIDE_VBMETA_IMAGE_PATH:-"$SYSTEM_IMAGES_DIR"/vbmeta.img}"
cp "$VBMETA_IMAGE_PATH" "$DEVICE_IMAGES_DIR"/
fi
fi
if [[ ! -z "${OVERRIDE_BOOT_IMAGE_PATH+x}" && -f "$DEVICE_IMAGES_DIR"/boot.img ]]; then
cp "$OVERRIDE_BOOT_IMAGE_PATH" "$DEVICE_IMAGES_DIR"/boot.img
fi
(
cd "$DEVICE_IMAGES_DIR"
zip -r mixed.zip ./*
)
if [ -n "$DIST_DIR" ]; then
mkdir -p "$DIST_DIR" || true
fi
rsync --archive --verbose --copy-links --exclude='logs' \
"$DEVICE_DIR"/* "$DIST_DIR"
OUT_ARCHIVE="$DIST_DIR"/"$(basename $DEVICE_ARCHIVE)"
cp "$DEVICE_IMAGES_DIR"/mixed.zip "$OUT_ARCHIVE"
cp "$DEVICE_IMAGES_DIR"/android-info.txt "$DIST_DIR"/
